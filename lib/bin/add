#!/bin/bash -eu

source "$(dirname $0)/../lego.sh"

# TODO:
# - manifest of installed files for proper cleanup

help() {
  cat << END
Usage:
    lego add LEGO
END
  exit
}

copy_file() {
  local name="$1"
  local src="${2#./}"
  local path="${3#./}"
  local dst="$4"

  local dir="$dst/$(dirname "$path")"
  mkdir -p "$dir"
  cp -fv "$src/$path" "$dst/$path"
  sed -i "" "s/%NAME%/$name/g" "$dst/$path"
}

copy_files() {
  local name="$1"
  local src="$2"
  local dst="$3"

  mkdir -p "$dst"
  # tar -C "$src" -cvf - --exclude .keep . | tar -C "$dst" -xf -
  for file in $( cd "$src"; find . -type f ); do
    copy_file "$name" "$src" "$file" "$dst"
  done
}

env_help() {
  local name="$1"
  local env="$2"

  cat <<END

-----------------------------------------------------------------------------------
${BOLD}${name}${RESET} includes a configuration file at

  - ${GREEN}${env}${RESET}

You can edit it directly, or run '${GREEN}lego config ${name}${RESET}'.

The original configuration is stored in

  - ${BLUE}${env}.orig${RESET}

in case you want to compare running ${BOLD}lego config-diff ${name}${RESET}
will run a diff of the current .env with the original.
-----------------------------------------------------------------------------------


END
}

copy_env() {
  local name="$1"
  local dst="$2"

  local template="$dst/templates/.env"
  [ -r "$template" ] || return 0

  local env="$dst/.env"

  # lego has .env. tell user avout it
  env_help "$name" "$env"

  # always copy .orig
  cp -f "$template" "$env.orig"

  # only copy .env if it doesn't aleady exist. do not overwrite potential local
  # configuration
  [ -e "$env" ] || cp -vf "$template" "$env"

  lego_cmd config-diff "$name"
}

run_install() {
  local dst="$1"

  [ -x "$dst/install.sh" ] || return 0

  "$dst/install.sh"
}

add() {
  handle_help "$@"
  require_args add 1 "$@"

  local lego="$1"

  if [ $# -gt 1 ]; then
    # user passed custom lego name
    local name="$2"
  else
    # standard name
    local name="$lego"
  fi


  local src="$(src_path $lego)"
  local dst="$(dst_path $name)"

  if [ ! -d "$src" ]; then
    echo "ERROR: $lego not found"
    exit 1
  fi

  copy_files "$name" "$src" "$dst"

  copy_env "$lego" "$dst"

  echo "$lego" > "$dst/.lego"

  run_install "$dst"

  lego_cmd update
}

add "$@"
